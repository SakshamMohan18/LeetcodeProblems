class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();
        if (n <= 1) return s;  

        String result = "";

        for (int i = 0; i < n; i++) {
            for (int j = n - 1; j >= i; j--) {

                int length = j - i + 1;

                if (length <= result.length()) break;

                String currentSubstr = s.substring(i, j + 1); 7                                     
                if (isPalindrome(currentSubstr)) {
                    result = currentSubstr; 
                    break;  // No need to check smaller substrings starting at 'first'
                }
            }
        }
        return result;
    }

    // Helper function to check if a string is a palindrome
    private boolean isPalindrome(String str) {
        int left = 0, right = str.length() - 1;
        while (left < right) {
            if (str.charAt(left++) != str.charAt(right--)) return false;
        }
        return true;
    }
}

